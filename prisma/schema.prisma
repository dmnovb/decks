// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider         = "prisma-client-js"
  output           = "../src/generated/prisma"
  connection_limit = 1
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  name          String?
  password      String
  createdAt     DateTime       @default(now())
  decks         Deck[]         @relation("UserDecks")
  conversations Conversation[] @relation("UserConversations")
}

model Deck {
  id          String      @id @default(uuid())
  title       String
  description String?
  category    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  user        User        @relation("UserDecks", fields: [userId], references: [id])
  flashcards  Flashcard[]
}

model Flashcard {
  id       String  @id @default(uuid())
  front    String
  back     String
  notes    String?
  audioUrl String?
  deckId   String
  deck     Deck    @relation(fields: [deckId], references: [id])

  // Spaced repetition fields
  difficulty     Int       @default(0) // Last response quality (0-5): 0=blackout, 1-2=incorrect, 3-5=correct
  interval       Int       @default(1) // Days until next review
  repetitions    Int       @default(0) // Number of times reviewed
  easeFactor     Float     @default(2.5) // SM-2 ease factor (starts at 2.5, minimum 1.3)
  lastReviewed   DateTime? // When it was last reviewed
  nextReview     DateTime? // When it should be reviewed next
  streak         Int       @default(0) // Consecutive correct answers
  totalReviews   Int       @default(0) // Total number of reviews
  correctReviews Int       @default(0) // Number of correct reviews
}

model Conversation {
  id        String    @id @default(uuid())
  title     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation("UserConversations", fields: [userId], references: [id])
  messages  Message[]
}

model Message {
  id             String       @id @default(uuid())
  role           String
  content        String
  createdAt      DateTime     @default(now())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}
